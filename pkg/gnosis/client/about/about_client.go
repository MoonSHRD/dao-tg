// Code generated by go-swagger; DO NOT EDIT.

package about

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new about API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for about API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AboutEthereumRPCList(params *AboutEthereumRPCListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AboutEthereumRPCListOK, error)

	AboutEthereumTracingRPCList(params *AboutEthereumTracingRPCListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AboutEthereumTracingRPCListOK, error)

	AboutList(params *AboutListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AboutListOK, error)

	AboutMasterCopiesList(params *AboutMasterCopiesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AboutMasterCopiesListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AboutEthereumRPCList Get information about the Ethereum RPC node used by the service
*/
func (a *Client) AboutEthereumRPCList(params *AboutEthereumRPCListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AboutEthereumRPCListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAboutEthereumRPCListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "about_ethereum-rpc_list",
		Method:             "GET",
		PathPattern:        "/about/ethereum-rpc/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AboutEthereumRPCListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AboutEthereumRPCListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for about_ethereum-rpc_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AboutEthereumTracingRPCList Get information about the Ethereum Tracing RPC node used by the service (if any configured)
*/
func (a *Client) AboutEthereumTracingRPCList(params *AboutEthereumTracingRPCListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AboutEthereumTracingRPCListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAboutEthereumTracingRPCListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "about_ethereum-tracing-rpc_list",
		Method:             "GET",
		PathPattern:        "/about/ethereum-tracing-rpc/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AboutEthereumTracingRPCListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AboutEthereumTracingRPCListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for about_ethereum-tracing-rpc_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AboutList Returns information and configuration of the service
*/
func (a *Client) AboutList(params *AboutListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AboutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAboutListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "about_list",
		Method:             "GET",
		PathPattern:        "/about/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AboutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AboutListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for about_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AboutMasterCopiesList about master copies list API
*/
func (a *Client) AboutMasterCopiesList(params *AboutMasterCopiesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AboutMasterCopiesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAboutMasterCopiesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "about_master-copies_list",
		Method:             "GET",
		PathPattern:        "/about/master-copies/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AboutMasterCopiesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AboutMasterCopiesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for about_master-copies_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
