// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTokensListParams creates a new TokensListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTokensListParams() *TokensListParams {
	return &TokensListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTokensListParamsWithTimeout creates a new TokensListParams object
// with the ability to set a timeout on a request.
func NewTokensListParamsWithTimeout(timeout time.Duration) *TokensListParams {
	return &TokensListParams{
		timeout: timeout,
	}
}

// NewTokensListParamsWithContext creates a new TokensListParams object
// with the ability to set a context for a request.
func NewTokensListParamsWithContext(ctx context.Context) *TokensListParams {
	return &TokensListParams{
		Context: ctx,
	}
}

// NewTokensListParamsWithHTTPClient creates a new TokensListParams object
// with the ability to set a custom HTTPClient for a request.
func NewTokensListParamsWithHTTPClient(client *http.Client) *TokensListParams {
	return &TokensListParams{
		HTTPClient: client,
	}
}

/* TokensListParams contains all the parameters to send to the API endpoint
   for the tokens list operation.

   Typically these are written to a http.Request.
*/
type TokensListParams struct {

	// Address.
	Address *string

	// Decimals.
	Decimals *float64

	// DecimalsGt.
	DecimalsGt *float64

	// DecimalsLt.
	DecimalsLt *float64

	/* Limit.

	   Number of results to return per page.
	*/
	Limit *int64

	// Name.
	Name *string

	/* Offset.

	   The initial index from which to return the results.
	*/
	Offset *int64

	/* Ordering.

	   Which field to use when ordering the results.
	*/
	Ordering *string

	/* Search.

	   A search term.
	*/
	Search *string

	// Symbol.
	Symbol *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the tokens list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TokensListParams) WithDefaults() *TokensListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the tokens list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TokensListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the tokens list params
func (o *TokensListParams) WithTimeout(timeout time.Duration) *TokensListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the tokens list params
func (o *TokensListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the tokens list params
func (o *TokensListParams) WithContext(ctx context.Context) *TokensListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the tokens list params
func (o *TokensListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the tokens list params
func (o *TokensListParams) WithHTTPClient(client *http.Client) *TokensListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the tokens list params
func (o *TokensListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the tokens list params
func (o *TokensListParams) WithAddress(address *string) *TokensListParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the tokens list params
func (o *TokensListParams) SetAddress(address *string) {
	o.Address = address
}

// WithDecimals adds the decimals to the tokens list params
func (o *TokensListParams) WithDecimals(decimals *float64) *TokensListParams {
	o.SetDecimals(decimals)
	return o
}

// SetDecimals adds the decimals to the tokens list params
func (o *TokensListParams) SetDecimals(decimals *float64) {
	o.Decimals = decimals
}

// WithDecimalsGt adds the decimalsGt to the tokens list params
func (o *TokensListParams) WithDecimalsGt(decimalsGt *float64) *TokensListParams {
	o.SetDecimalsGt(decimalsGt)
	return o
}

// SetDecimalsGt adds the decimalsGt to the tokens list params
func (o *TokensListParams) SetDecimalsGt(decimalsGt *float64) {
	o.DecimalsGt = decimalsGt
}

// WithDecimalsLt adds the decimalsLt to the tokens list params
func (o *TokensListParams) WithDecimalsLt(decimalsLt *float64) *TokensListParams {
	o.SetDecimalsLt(decimalsLt)
	return o
}

// SetDecimalsLt adds the decimalsLt to the tokens list params
func (o *TokensListParams) SetDecimalsLt(decimalsLt *float64) {
	o.DecimalsLt = decimalsLt
}

// WithLimit adds the limit to the tokens list params
func (o *TokensListParams) WithLimit(limit *int64) *TokensListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the tokens list params
func (o *TokensListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the tokens list params
func (o *TokensListParams) WithName(name *string) *TokensListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the tokens list params
func (o *TokensListParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the tokens list params
func (o *TokensListParams) WithOffset(offset *int64) *TokensListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the tokens list params
func (o *TokensListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the tokens list params
func (o *TokensListParams) WithOrdering(ordering *string) *TokensListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the tokens list params
func (o *TokensListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithSearch adds the search to the tokens list params
func (o *TokensListParams) WithSearch(search *string) *TokensListParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the tokens list params
func (o *TokensListParams) SetSearch(search *string) {
	o.Search = search
}

// WithSymbol adds the symbol to the tokens list params
func (o *TokensListParams) WithSymbol(symbol *string) *TokensListParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the tokens list params
func (o *TokensListParams) SetSymbol(symbol *string) {
	o.Symbol = symbol
}

// WriteToRequest writes these params to a swagger request
func (o *TokensListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Address != nil {

		// query param address
		var qrAddress string

		if o.Address != nil {
			qrAddress = *o.Address
		}
		qAddress := qrAddress
		if qAddress != "" {

			if err := r.SetQueryParam("address", qAddress); err != nil {
				return err
			}
		}
	}

	if o.Decimals != nil {

		// query param decimals
		var qrDecimals float64

		if o.Decimals != nil {
			qrDecimals = *o.Decimals
		}
		qDecimals := swag.FormatFloat64(qrDecimals)
		if qDecimals != "" {

			if err := r.SetQueryParam("decimals", qDecimals); err != nil {
				return err
			}
		}
	}

	if o.DecimalsGt != nil {

		// query param decimals__gt
		var qrDecimalsGt float64

		if o.DecimalsGt != nil {
			qrDecimalsGt = *o.DecimalsGt
		}
		qDecimalsGt := swag.FormatFloat64(qrDecimalsGt)
		if qDecimalsGt != "" {

			if err := r.SetQueryParam("decimals__gt", qDecimalsGt); err != nil {
				return err
			}
		}
	}

	if o.DecimalsLt != nil {

		// query param decimals__lt
		var qrDecimalsLt float64

		if o.DecimalsLt != nil {
			qrDecimalsLt = *o.DecimalsLt
		}
		qDecimalsLt := swag.FormatFloat64(qrDecimalsLt)
		if qDecimalsLt != "" {

			if err := r.SetQueryParam("decimals__lt", qDecimalsLt); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string

		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {

			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.Symbol != nil {

		// query param symbol
		var qrSymbol string

		if o.Symbol != nil {
			qrSymbol = *o.Symbol
		}
		qSymbol := qrSymbol
		if qSymbol != "" {

			if err := r.SetQueryParam("symbol", qSymbol); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
