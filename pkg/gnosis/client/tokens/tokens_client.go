// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tokens API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tokens API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TokensList(params *TokensListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TokensListOK, error)

	TokensPricesUsdList(params *TokensPricesUsdListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TokensPricesUsdListOK, error)

	TokensRead(params *TokensReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TokensReadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TokensList tokens list API
*/
func (a *Client) TokensList(params *TokensListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TokensListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTokensListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tokens_list",
		Method:             "GET",
		PathPattern:        "/tokens/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TokensListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TokensListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tokens_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TokensPricesUsdList tokens prices usd list API
*/
func (a *Client) TokensPricesUsdList(params *TokensPricesUsdListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TokensPricesUsdListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTokensPricesUsdListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tokens_prices_usd_list",
		Method:             "GET",
		PathPattern:        "/tokens/{address}/prices/usd/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TokensPricesUsdListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TokensPricesUsdListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tokens_prices_usd_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TokensRead tokens read API
*/
func (a *Client) TokensRead(params *TokensReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TokensReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTokensReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tokens_read",
		Method:             "GET",
		PathPattern:        "/tokens/{address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TokensReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TokensReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tokens_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
