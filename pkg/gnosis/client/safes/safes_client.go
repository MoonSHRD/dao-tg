// Code generated by go-swagger; DO NOT EDIT.

package safes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new safes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for safes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SafesAllTransactionsList(params *SafesAllTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesAllTransactionsListOK, error)

	SafesBalancesList(params *SafesBalancesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesBalancesListOK, error)

	SafesBalancesUsdList(params *SafesBalancesUsdListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesBalancesUsdListOK, error)

	SafesCollectiblesList(params *SafesCollectiblesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesCollectiblesListOK, error)

	SafesCreationList(params *SafesCreationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesCreationListOK, error)

	SafesDelegatesCreate(params *SafesDelegatesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesDelegatesCreateAccepted, error)

	SafesDelegatesDelete(params *SafesDelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesDelegatesDeleteNoContent, error)

	SafesDelegatesDeleteAll(params *SafesDelegatesDeleteAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesDelegatesDeleteAllNoContent, error)

	SafesDelegatesList(params *SafesDelegatesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesDelegatesListOK, error)

	SafesIncomingTransfersList(params *SafesIncomingTransfersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesIncomingTransfersListOK, error)

	SafesModuleTransactionsList(params *SafesModuleTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesModuleTransactionsListOK, error)

	SafesMultisigTransactionsCreate(params *SafesMultisigTransactionsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesMultisigTransactionsCreateCreated, error)

	SafesMultisigTransactionsEstimationsCreate(params *SafesMultisigTransactionsEstimationsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesMultisigTransactionsEstimationsCreateOK, error)

	SafesMultisigTransactionsList(params *SafesMultisigTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesMultisigTransactionsListOK, error)

	SafesRead(params *SafesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesReadOK, error)

	SafesTransactionsCreate(params *SafesTransactionsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesTransactionsCreateCreated, error)

	SafesTransactionsList(params *SafesTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesTransactionsListOK, error)

	SafesTransfersList(params *SafesTransfersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesTransfersListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SafesAllTransactionsList Returns a paginated list of transactions for a Safe. The list has different structures depending on the
transaction type:
- Multisig Transactions for a Safe. `tx_type=MULTISIG_TRANSACTION`. If the query parameter `queued=False` is
set only the transactions with `safe nonce < current Safe nonce` will be displayed. By default, only the
`trusted` transactions will be displayed (transactions indexed, with at least one confirmation or proposed
by a delegate). If you need that behaviour to be disabled set the query parameter `trusted=False`
- Module Transactions for a Safe. `tx_type=MODULE_TRANSACTION`
- Incoming Transfers of Ether/ERC20 Tokens/ERC721 Tokens. `tx_type=ETHEREUM_TRANSACTION`
*/
func (a *Client) SafesAllTransactionsList(params *SafesAllTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesAllTransactionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesAllTransactionsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_all-transactions_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/all-transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesAllTransactionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesAllTransactionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_all-transactions_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesBalancesList Get balance for Ether and ERC20 tokens
*/
func (a *Client) SafesBalancesList(params *SafesBalancesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesBalancesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesBalancesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_balances_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/balances/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesBalancesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesBalancesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_balances_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesBalancesUsdList Get balance for Ether and ERC20 tokens with USD fiat conversion
*/
func (a *Client) SafesBalancesUsdList(params *SafesBalancesUsdListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesBalancesUsdListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesBalancesUsdListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_balances_usd_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/balances/usd/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesBalancesUsdListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesBalancesUsdListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_balances_usd_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesCollectiblesList Get collectibles (ERC721 tokens) and information about them
*/
func (a *Client) SafesCollectiblesList(params *SafesCollectiblesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesCollectiblesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesCollectiblesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_collectibles_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/collectibles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesCollectiblesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesCollectiblesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_collectibles_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesCreationList Get status of the safe
*/
func (a *Client) SafesCreationList(params *SafesCreationListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesCreationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesCreationListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_creation_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/creation/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesCreationListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesCreationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_creation_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesDelegatesCreate Use /delegates endpoint
*/
func (a *Client) SafesDelegatesCreate(params *SafesDelegatesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesDelegatesCreateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesDelegatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_delegates_create",
		Method:             "POST",
		PathPattern:        "/safes/{address}/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesDelegatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesDelegatesCreateAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_delegates_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesDelegatesDelete Delete a delegate for a Safe. Signature is built the same way that for adding a delegate.
Check `POST /delegates/`
*/
func (a *Client) SafesDelegatesDelete(params *SafesDelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesDelegatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesDelegatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_delegates_delete",
		Method:             "DELETE",
		PathPattern:        "/safes/{address}/delegates/{delegate_address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesDelegatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesDelegatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_delegates_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesDelegatesDeleteAll Use /delegates endpoint
*/
func (a *Client) SafesDelegatesDeleteAll(params *SafesDelegatesDeleteAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesDelegatesDeleteAllNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesDelegatesDeleteAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_delegates_delete_all",
		Method:             "DELETE",
		PathPattern:        "/safes/{address}/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesDelegatesDeleteAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesDelegatesDeleteAllNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_delegates_delete_all: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesDelegatesList Use /delegates endpoint
*/
func (a *Client) SafesDelegatesList(params *SafesDelegatesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesDelegatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesDelegatesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_delegates_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesDelegatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesDelegatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_delegates_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesIncomingTransfersList Returns incoming ether/tokens transfers for a Safe
*/
func (a *Client) SafesIncomingTransfersList(params *SafesIncomingTransfersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesIncomingTransfersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesIncomingTransfersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_incoming-transfers_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/incoming-transfers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesIncomingTransfersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesIncomingTransfersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_incoming-transfers_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesModuleTransactionsList Returns the module transaction of a Safe
*/
func (a *Client) SafesModuleTransactionsList(params *SafesModuleTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesModuleTransactionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesModuleTransactionsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_module-transactions_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/module-transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesModuleTransactionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesModuleTransactionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_module-transactions_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesMultisigTransactionsCreate Creates a Multisig Transaction with its confirmations and retrieves all the information related.
*/
func (a *Client) SafesMultisigTransactionsCreate(params *SafesMultisigTransactionsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesMultisigTransactionsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesMultisigTransactionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_multisig-transactions_create",
		Method:             "POST",
		PathPattern:        "/safes/{address}/multisig-transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesMultisigTransactionsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesMultisigTransactionsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_multisig-transactions_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesMultisigTransactionsEstimationsCreate Estimates `safeTxGas` for a Safe Multisig Transaction.
*/
func (a *Client) SafesMultisigTransactionsEstimationsCreate(params *SafesMultisigTransactionsEstimationsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesMultisigTransactionsEstimationsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesMultisigTransactionsEstimationsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_multisig-transactions_estimations_create",
		Method:             "POST",
		PathPattern:        "/safes/{address}/multisig-transactions/estimations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesMultisigTransactionsEstimationsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesMultisigTransactionsEstimationsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_multisig-transactions_estimations_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesMultisigTransactionsList Returns the history of a multisig tx (safe)
*/
func (a *Client) SafesMultisigTransactionsList(params *SafesMultisigTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesMultisigTransactionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesMultisigTransactionsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_multisig-transactions_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/multisig-transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesMultisigTransactionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesMultisigTransactionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_multisig-transactions_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesRead Get status of the safe
*/
func (a *Client) SafesRead(params *SafesReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_read",
		Method:             "GET",
		PathPattern:        "/safes/{address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesTransactionsCreate Use `multisig-transactions` instead of `transactions`
*/
func (a *Client) SafesTransactionsCreate(params *SafesTransactionsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesTransactionsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesTransactionsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_transactions_create",
		Method:             "POST",
		PathPattern:        "/safes/{address}/transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesTransactionsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesTransactionsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_transactions_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesTransactionsList Use `multisig-transactions` instead of `transactions`
*/
func (a *Client) SafesTransactionsList(params *SafesTransactionsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesTransactionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesTransactionsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_transactions_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/transactions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesTransactionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesTransactionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_transactions_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SafesTransfersList Returns ether/tokens transfers for a Safe
*/
func (a *Client) SafesTransfersList(params *SafesTransfersListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SafesTransfersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSafesTransfersListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "safes_transfers_list",
		Method:             "GET",
		PathPattern:        "/safes/{address}/transfers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SafesTransfersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SafesTransfersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for safes_transfers_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
