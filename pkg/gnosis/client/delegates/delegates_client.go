// Code generated by go-swagger; DO NOT EDIT.

package delegates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new delegates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for delegates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DelegatesCreate(params *DelegatesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DelegatesCreateAccepted, error)

	DelegatesDelete(params *DelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DelegatesDeleteNoContent, error)

	DelegatesList(params *DelegatesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DelegatesListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DelegatesCreate Create a delegate for a Safe address with a custom label. Calls with same delegate but different label or
signer will update the label or delegator if different.
For the signature we are using TOTP with `T0=0` and `Tx=3600`. TOTP is calculated by taking the
Unix UTC epoch time (no milliseconds) and dividing by 3600 (natural division, no decimals)
For signature this hash need to be signed: keccak(checksummed address + str(int(current_epoch // 3600)))
For example:
     - We want to add the delegate `0x132512f995866CcE1b0092384A6118EDaF4508Ff` and `epoch=1586779140`.
     - `TOTP = epoch // 3600 = 1586779140 // 3600 = 440771`
     - The hash to sign by a Safe owner would be `keccak("0x132512f995866CcE1b0092384A6118EDaF4508Ff440771")`
*/
func (a *Client) DelegatesCreate(params *DelegatesCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DelegatesCreateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegatesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delegates_create",
		Method:             "POST",
		PathPattern:        "/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DelegatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegatesCreateAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delegates_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DelegatesDelete Delete every pair delegate/delegator found. Signature is built the same way as for adding a delegate,
but in this case the signer can be either the `delegator` (owner) or the `delegate` itself.
Check `POST /delegates/`
*/
func (a *Client) DelegatesDelete(params *DelegatesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DelegatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegatesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delegates_delete",
		Method:             "DELETE",
		PathPattern:        "/delegates/{delegate_address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DelegatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegatesDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delegates_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DelegatesList Get list of delegates
*/
func (a *Client) DelegatesList(params *DelegatesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DelegatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegatesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delegates_list",
		Method:             "GET",
		PathPattern:        "/delegates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DelegatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delegates_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
