// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAnalyticsMultisigTransactionsBySafeListParams creates a new AnalyticsMultisigTransactionsBySafeListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAnalyticsMultisigTransactionsBySafeListParams() *AnalyticsMultisigTransactionsBySafeListParams {
	return &AnalyticsMultisigTransactionsBySafeListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAnalyticsMultisigTransactionsBySafeListParamsWithTimeout creates a new AnalyticsMultisigTransactionsBySafeListParams object
// with the ability to set a timeout on a request.
func NewAnalyticsMultisigTransactionsBySafeListParamsWithTimeout(timeout time.Duration) *AnalyticsMultisigTransactionsBySafeListParams {
	return &AnalyticsMultisigTransactionsBySafeListParams{
		timeout: timeout,
	}
}

// NewAnalyticsMultisigTransactionsBySafeListParamsWithContext creates a new AnalyticsMultisigTransactionsBySafeListParams object
// with the ability to set a context for a request.
func NewAnalyticsMultisigTransactionsBySafeListParamsWithContext(ctx context.Context) *AnalyticsMultisigTransactionsBySafeListParams {
	return &AnalyticsMultisigTransactionsBySafeListParams{
		Context: ctx,
	}
}

// NewAnalyticsMultisigTransactionsBySafeListParamsWithHTTPClient creates a new AnalyticsMultisigTransactionsBySafeListParams object
// with the ability to set a custom HTTPClient for a request.
func NewAnalyticsMultisigTransactionsBySafeListParamsWithHTTPClient(client *http.Client) *AnalyticsMultisigTransactionsBySafeListParams {
	return &AnalyticsMultisigTransactionsBySafeListParams{
		HTTPClient: client,
	}
}

/* AnalyticsMultisigTransactionsBySafeListParams contains all the parameters to send to the API endpoint
   for the analytics multisig transactions by safe list operation.

   Typically these are written to a http.Request.
*/
type AnalyticsMultisigTransactionsBySafeListParams struct {

	/* Limit.

	   Number of results to return per page.
	*/
	Limit *int64

	// MasterCopy.
	MasterCopy *string

	/* Offset.

	   The initial index from which to return the results.
	*/
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the analytics multisig transactions by safe list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AnalyticsMultisigTransactionsBySafeListParams) WithDefaults() *AnalyticsMultisigTransactionsBySafeListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the analytics multisig transactions by safe list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AnalyticsMultisigTransactionsBySafeListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) WithTimeout(timeout time.Duration) *AnalyticsMultisigTransactionsBySafeListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) WithContext(ctx context.Context) *AnalyticsMultisigTransactionsBySafeListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) WithHTTPClient(client *http.Client) *AnalyticsMultisigTransactionsBySafeListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) WithLimit(limit *int64) *AnalyticsMultisigTransactionsBySafeListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMasterCopy adds the masterCopy to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) WithMasterCopy(masterCopy *string) *AnalyticsMultisigTransactionsBySafeListParams {
	o.SetMasterCopy(masterCopy)
	return o
}

// SetMasterCopy adds the masterCopy to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) SetMasterCopy(masterCopy *string) {
	o.MasterCopy = masterCopy
}

// WithOffset adds the offset to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) WithOffset(offset *int64) *AnalyticsMultisigTransactionsBySafeListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the analytics multisig transactions by safe list params
func (o *AnalyticsMultisigTransactionsBySafeListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *AnalyticsMultisigTransactionsBySafeListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.MasterCopy != nil {

		// query param master_copy
		var qrMasterCopy string

		if o.MasterCopy != nil {
			qrMasterCopy = *o.MasterCopy
		}
		qMasterCopy := qrMasterCopy
		if qMasterCopy != "" {

			if err := r.SetQueryParam("master_copy", qMasterCopy); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
