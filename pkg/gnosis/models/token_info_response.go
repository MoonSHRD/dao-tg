// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenInfoResponse token info response
//
// swagger:model TokenInfoResponse
type TokenInfoResponse struct {

	// Address
	// Required: true
	Address *string `json:"address"`

	// Decimals
	// Required: true
	Decimals *int64 `json:"decimals"`

	// Logo uri
	// Read Only: true
	LogoURI string `json:"logoUri,omitempty"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Symbol
	// Required: true
	// Min Length: 1
	Symbol *string `json:"symbol"`

	// Type
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this token info response
func (m *TokenInfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecimals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenInfoResponse) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *TokenInfoResponse) validateDecimals(formats strfmt.Registry) error {

	if err := validate.Required("decimals", "body", m.Decimals); err != nil {
		return err
	}

	return nil
}

func (m *TokenInfoResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *TokenInfoResponse) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol", "body", m.Symbol); err != nil {
		return err
	}

	if err := validate.MinLength("symbol", "body", *m.Symbol, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this token info response based on the context it is used
func (m *TokenInfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLogoURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenInfoResponse) contextValidateLogoURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "logoUri", "body", string(m.LogoURI)); err != nil {
		return err
	}

	return nil
}

func (m *TokenInfoResponse) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokenInfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenInfoResponse) UnmarshalBinary(b []byte) error {
	var res TokenInfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
