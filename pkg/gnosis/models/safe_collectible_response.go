// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeCollectibleResponse safe collectible response
//
// swagger:model SafeCollectibleResponse
type SafeCollectibleResponse struct {

	// Address
	// Required: true
	// Min Length: 1
	Address *string `json:"address"`

	// Description
	// Required: true
	// Min Length: 1
	Description *string `json:"description"`

	// Id
	// Required: true
	// Min Length: 1
	ID *string `json:"id"`

	// Image uri
	// Required: true
	// Min Length: 1
	ImageURI *string `json:"imageUri"`

	// Logo uri
	// Required: true
	// Min Length: 1
	LogoURI *string `json:"logoUri"`

	// Metadata
	// Required: true
	Metadata map[string]*string `json:"metadata"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Token name
	// Required: true
	// Min Length: 1
	TokenName *string `json:"tokenName"`

	// Token symbol
	// Required: true
	// Min Length: 1
	TokenSymbol *string `json:"tokenSymbol"`

	// Uri
	// Required: true
	// Min Length: 1
	URI *string `json:"uri"`
}

// Validate validates this safe collectible response
func (m *SafeCollectibleResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogoURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeCollectibleResponse) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	if err := validate.MinLength("address", "body", *m.Address, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", *m.Description, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", *m.ID, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateImageURI(formats strfmt.Registry) error {

	if err := validate.Required("imageUri", "body", m.ImageURI); err != nil {
		return err
	}

	if err := validate.MinLength("imageUri", "body", *m.ImageURI, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateLogoURI(formats strfmt.Registry) error {

	if err := validate.Required("logoUri", "body", m.LogoURI); err != nil {
		return err
	}

	if err := validate.MinLength("logoUri", "body", *m.LogoURI, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateTokenName(formats strfmt.Registry) error {

	if err := validate.Required("tokenName", "body", m.TokenName); err != nil {
		return err
	}

	if err := validate.MinLength("tokenName", "body", *m.TokenName, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateTokenSymbol(formats strfmt.Registry) error {

	if err := validate.Required("tokenSymbol", "body", m.TokenSymbol); err != nil {
		return err
	}

	if err := validate.MinLength("tokenSymbol", "body", *m.TokenSymbol, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeCollectibleResponse) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	if err := validate.MinLength("uri", "body", *m.URI, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this safe collectible response based on context it is used
func (m *SafeCollectibleResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SafeCollectibleResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeCollectibleResponse) UnmarshalBinary(b []byte) error {
	var res SafeCollectibleResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
