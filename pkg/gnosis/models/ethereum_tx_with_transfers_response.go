// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EthereumTxWithTransfersResponse ethereum tx with transfers response
//
// swagger:model EthereumTxWithTransfersResponse
type EthereumTxWithTransfersResponse struct {

	// Block number
	// Read Only: true
	BlockNumber int64 `json:"blockNumber,omitempty"`

	// Data
	// Required: true
	Data *string `json:"data"`

	// Execution date
	// Required: true
	// Format: date-time
	ExecutionDate *strfmt.DateTime `json:"executionDate"`

	// From
	// Required: true
	From *string `json:"from"`

	// To
	// Required: true
	To *string `json:"to"`

	// transfers
	// Required: true
	Transfers []*TransferWithTokenInfoResponse `json:"transfers"`

	// Tx hash
	// Required: true
	TxHash *string `json:"txHash"`

	// Tx type
	// Read Only: true
	TxType string `json:"txType,omitempty"`
}

// Validate validates this ethereum tx with transfers response
func (m *EthereumTxWithTransfersResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EthereumTxWithTransfersResponse) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

func (m *EthereumTxWithTransfersResponse) validateExecutionDate(formats strfmt.Registry) error {

	if err := validate.Required("executionDate", "body", m.ExecutionDate); err != nil {
		return err
	}

	if err := validate.FormatOf("executionDate", "body", "date-time", m.ExecutionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EthereumTxWithTransfersResponse) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *EthereumTxWithTransfersResponse) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

func (m *EthereumTxWithTransfersResponse) validateTransfers(formats strfmt.Registry) error {

	if err := validate.Required("transfers", "body", m.Transfers); err != nil {
		return err
	}

	for i := 0; i < len(m.Transfers); i++ {
		if swag.IsZero(m.Transfers[i]) { // not required
			continue
		}

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EthereumTxWithTransfersResponse) validateTxHash(formats strfmt.Registry) error {

	if err := validate.Required("txHash", "body", m.TxHash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ethereum tx with transfers response based on the context it is used
func (m *EthereumTxWithTransfersResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransfers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EthereumTxWithTransfersResponse) contextValidateBlockNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "blockNumber", "body", int64(m.BlockNumber)); err != nil {
		return err
	}

	return nil
}

func (m *EthereumTxWithTransfersResponse) contextValidateTransfers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transfers); i++ {

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EthereumTxWithTransfersResponse) contextValidateTxType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "txType", "body", string(m.TxType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EthereumTxWithTransfersResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EthereumTxWithTransfersResponse) UnmarshalBinary(b []byte) error {
	var res EthereumTxWithTransfersResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
