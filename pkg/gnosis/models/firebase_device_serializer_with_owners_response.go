// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FirebaseDeviceSerializerWithOwnersResponse firebase device serializer with owners response
//
// swagger:model FirebaseDeviceSerializerWithOwnersResponse
type FirebaseDeviceSerializerWithOwnersResponse struct {

	// Build number
	// Required: true
	// Minimum: 0
	BuildNumber *int64 `json:"buildNumber"`

	// Bundle
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Bundle *string `json:"bundle"`

	// Cloud messaging token
	// Required: true
	// Max Length: 200
	// Min Length: 100
	CloudMessagingToken *string `json:"cloudMessagingToken"`

	// Device type
	// Required: true
	// Enum: [ANDROID IOS WEB]
	DeviceType *string `json:"deviceType"`

	// owners not registered
	// Required: true
	OwnersNotRegistered []string `json:"ownersNotRegistered"`

	// owners registered
	// Required: true
	OwnersRegistered []string `json:"ownersRegistered"`

	// safes
	// Required: true
	Safes []string `json:"safes"`

	// signatures
	Signatures []string `json:"signatures"`

	// Timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// Uuid
	// Format: uuid
	UUID *strfmt.UUID `json:"uuid,omitempty"`

	// Version
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Version *string `json:"version"`
}

// Validate validates this firebase device serializer with owners response
func (m *FirebaseDeviceSerializerWithOwnersResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudMessagingToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnersNotRegistered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnersRegistered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateBuildNumber(formats strfmt.Registry) error {

	if err := validate.Required("buildNumber", "body", m.BuildNumber); err != nil {
		return err
	}

	if err := validate.MinimumInt("buildNumber", "body", *m.BuildNumber, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateBundle(formats strfmt.Registry) error {

	if err := validate.Required("bundle", "body", m.Bundle); err != nil {
		return err
	}

	if err := validate.MinLength("bundle", "body", *m.Bundle, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("bundle", "body", *m.Bundle, 100); err != nil {
		return err
	}

	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateCloudMessagingToken(formats strfmt.Registry) error {

	if err := validate.Required("cloudMessagingToken", "body", m.CloudMessagingToken); err != nil {
		return err
	}

	if err := validate.MinLength("cloudMessagingToken", "body", *m.CloudMessagingToken, 100); err != nil {
		return err
	}

	if err := validate.MaxLength("cloudMessagingToken", "body", *m.CloudMessagingToken, 200); err != nil {
		return err
	}

	return nil
}

var firebaseDeviceSerializerWithOwnersResponseTypeDeviceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ANDROID","IOS","WEB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		firebaseDeviceSerializerWithOwnersResponseTypeDeviceTypePropEnum = append(firebaseDeviceSerializerWithOwnersResponseTypeDeviceTypePropEnum, v)
	}
}

const (

	// FirebaseDeviceSerializerWithOwnersResponseDeviceTypeANDROID captures enum value "ANDROID"
	FirebaseDeviceSerializerWithOwnersResponseDeviceTypeANDROID string = "ANDROID"

	// FirebaseDeviceSerializerWithOwnersResponseDeviceTypeIOS captures enum value "IOS"
	FirebaseDeviceSerializerWithOwnersResponseDeviceTypeIOS string = "IOS"

	// FirebaseDeviceSerializerWithOwnersResponseDeviceTypeWEB captures enum value "WEB"
	FirebaseDeviceSerializerWithOwnersResponseDeviceTypeWEB string = "WEB"
)

// prop value enum
func (m *FirebaseDeviceSerializerWithOwnersResponse) validateDeviceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, firebaseDeviceSerializerWithOwnersResponseTypeDeviceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateDeviceType(formats strfmt.Registry) error {

	if err := validate.Required("deviceType", "body", m.DeviceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDeviceTypeEnum("deviceType", "body", *m.DeviceType); err != nil {
		return err
	}

	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateOwnersNotRegistered(formats strfmt.Registry) error {

	if err := validate.Required("ownersNotRegistered", "body", m.OwnersNotRegistered); err != nil {
		return err
	}

	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateOwnersRegistered(formats strfmt.Registry) error {

	if err := validate.Required("ownersRegistered", "body", m.OwnersRegistered); err != nil {
		return err
	}

	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateSafes(formats strfmt.Registry) error {

	if err := validate.Required("safes", "body", m.Safes); err != nil {
		return err
	}

	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.FormatOf("uuid", "body", "uuid", m.UUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FirebaseDeviceSerializerWithOwnersResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if err := validate.MinLength("version", "body", *m.Version, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("version", "body", *m.Version, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this firebase device serializer with owners response based on context it is used
func (m *FirebaseDeviceSerializerWithOwnersResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FirebaseDeviceSerializerWithOwnersResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FirebaseDeviceSerializerWithOwnersResponse) UnmarshalBinary(b []byte) error {
	var res FirebaseDeviceSerializerWithOwnersResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
