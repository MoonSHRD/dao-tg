// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContractAbi contract abi
//
// swagger:model ContractAbi
type ContractAbi struct {

	// abi
	// Required: true
	Abi []map[string]*string `json:"abi"`

	// Description
	// Required: true
	// Min Length: 1
	Description *string `json:"description"`

	// Relevance
	// Required: true
	Relevance *int64 `json:"relevance"`
}

// Validate validates this contract abi
func (m *ContractAbi) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelevance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractAbi) validateAbi(formats strfmt.Registry) error {

	if err := validate.Required("abi", "body", m.Abi); err != nil {
		return err
	}

	return nil
}

func (m *ContractAbi) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", *m.Description, 1); err != nil {
		return err
	}

	return nil
}

func (m *ContractAbi) validateRelevance(formats strfmt.Registry) error {

	if err := validate.Required("relevance", "body", m.Relevance); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this contract abi based on context it is used
func (m *ContractAbi) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContractAbi) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractAbi) UnmarshalBinary(b []byte) error {
	var res ContractAbi
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
