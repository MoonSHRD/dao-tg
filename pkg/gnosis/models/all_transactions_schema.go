// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AllTransactionsSchema all transactions schema
//
// swagger:model AllTransactionsSchema
type AllTransactionsSchema struct {

	// tx type1
	// Required: true
	TxType1 *SafeModuleTransactionWithTransfersResponse `json:"txType1"`

	// tx type2
	// Required: true
	TxType2 *SafeMultisigTransactionWithTransfersResponse `json:"txType2"`

	// tx type3
	// Required: true
	TxType3 *EthereumTxWithTransfersResponse `json:"txType3"`
}

// Validate validates this all transactions schema
func (m *AllTransactionsSchema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTxType1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxType2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxType3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllTransactionsSchema) validateTxType1(formats strfmt.Registry) error {

	if err := validate.Required("txType1", "body", m.TxType1); err != nil {
		return err
	}

	if m.TxType1 != nil {
		if err := m.TxType1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txType1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txType1")
			}
			return err
		}
	}

	return nil
}

func (m *AllTransactionsSchema) validateTxType2(formats strfmt.Registry) error {

	if err := validate.Required("txType2", "body", m.TxType2); err != nil {
		return err
	}

	if m.TxType2 != nil {
		if err := m.TxType2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txType2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txType2")
			}
			return err
		}
	}

	return nil
}

func (m *AllTransactionsSchema) validateTxType3(formats strfmt.Registry) error {

	if err := validate.Required("txType3", "body", m.TxType3); err != nil {
		return err
	}

	if m.TxType3 != nil {
		if err := m.TxType3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txType3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txType3")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this all transactions schema based on the context it is used
func (m *AllTransactionsSchema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTxType1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxType2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxType3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AllTransactionsSchema) contextValidateTxType1(ctx context.Context, formats strfmt.Registry) error {

	if m.TxType1 != nil {
		if err := m.TxType1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txType1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txType1")
			}
			return err
		}
	}

	return nil
}

func (m *AllTransactionsSchema) contextValidateTxType2(ctx context.Context, formats strfmt.Registry) error {

	if m.TxType2 != nil {
		if err := m.TxType2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txType2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txType2")
			}
			return err
		}
	}

	return nil
}

func (m *AllTransactionsSchema) contextValidateTxType3(ctx context.Context, formats strfmt.Registry) error {

	if m.TxType3 != nil {
		if err := m.TxType3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txType3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txType3")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AllTransactionsSchema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AllTransactionsSchema) UnmarshalBinary(b []byte) error {
	var res AllTransactionsSchema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
