// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeModuleTransactionWithTransfersResponse safe module transaction with transfers response
//
// swagger:model SafeModuleTransactionWithTransfersResponse
type SafeModuleTransactionWithTransfersResponse struct {

	// Block number
	// Read Only: true
	BlockNumber int64 `json:"blockNumber,omitempty"`

	// Created
	// Read Only: true
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// Data
	// Required: true
	Data *string `json:"data"`

	// Data decoded
	// Read Only: true
	DataDecoded string `json:"dataDecoded,omitempty"`

	// Execution date
	// Required: true
	// Format: date-time
	ExecutionDate *strfmt.DateTime `json:"executionDate"`

	// Is successful
	// Read Only: true
	IsSuccessful *bool `json:"isSuccessful,omitempty"`

	// Module
	// Required: true
	// Min Length: 1
	Module *string `json:"module"`

	// Operation
	// Required: true
	// Enum: [0 1 2]
	Operation *int64 `json:"operation"`

	// Safe
	// Required: true
	// Min Length: 1
	Safe *string `json:"safe"`

	// To
	// Required: true
	// Min Length: 1
	To *string `json:"to"`

	// Transaction hash
	// Read Only: true
	TransactionHash string `json:"transactionHash,omitempty"`

	// transfers
	// Required: true
	Transfers []*TransferWithTokenInfoResponse `json:"transfers"`

	// Tx type
	// Read Only: true
	TxType string `json:"txType,omitempty"`

	// Value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this safe module transaction with transfers response
func (m *SafeModuleTransactionWithTransfersResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateExecutionDate(formats strfmt.Registry) error {

	if err := validate.Required("executionDate", "body", m.ExecutionDate); err != nil {
		return err
	}

	if err := validate.FormatOf("executionDate", "body", "date-time", m.ExecutionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateModule(formats strfmt.Registry) error {

	if err := validate.Required("module", "body", m.Module); err != nil {
		return err
	}

	if err := validate.MinLength("module", "body", *m.Module, 1); err != nil {
		return err
	}

	return nil
}

var safeModuleTransactionWithTransfersResponseTypeOperationPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		safeModuleTransactionWithTransfersResponseTypeOperationPropEnum = append(safeModuleTransactionWithTransfersResponseTypeOperationPropEnum, v)
	}
}

// prop value enum
func (m *SafeModuleTransactionWithTransfersResponse) validateOperationEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, safeModuleTransactionWithTransfersResponseTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", *m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateSafe(formats strfmt.Registry) error {

	if err := validate.Required("safe", "body", m.Safe); err != nil {
		return err
	}

	if err := validate.MinLength("safe", "body", *m.Safe, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	if err := validate.MinLength("to", "body", *m.To, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateTransfers(formats strfmt.Registry) error {

	if err := validate.Required("transfers", "body", m.Transfers); err != nil {
		return err
	}

	for i := 0; i < len(m.Transfers); i++ {
		if swag.IsZero(m.Transfers[i]) { // not required
			continue
		}

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this safe module transaction with transfers response based on the context it is used
func (m *SafeModuleTransactionWithTransfersResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataDecoded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsSuccessful(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransfers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) contextValidateBlockNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "blockNumber", "body", int64(m.BlockNumber)); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) contextValidateDataDecoded(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dataDecoded", "body", string(m.DataDecoded)); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) contextValidateIsSuccessful(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isSuccessful", "body", m.IsSuccessful); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) contextValidateTransactionHash(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "transactionHash", "body", string(m.TransactionHash)); err != nil {
		return err
	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) contextValidateTransfers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transfers); i++ {

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SafeModuleTransactionWithTransfersResponse) contextValidateTxType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "txType", "body", string(m.TxType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SafeModuleTransactionWithTransfersResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeModuleTransactionWithTransfersResponse) UnmarshalBinary(b []byte) error {
	var res SafeModuleTransactionWithTransfersResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
