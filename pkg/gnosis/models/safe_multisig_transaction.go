// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeMultisigTransaction safe multisig transaction
//
// swagger:model SafeMultisigTransaction
type SafeMultisigTransaction struct {

	// Base gas
	// Required: true
	// Minimum: 0
	BaseGas *int64 `json:"baseGas"`

	// Contract transaction hash
	// Required: true
	ContractTransactionHash *string `json:"contractTransactionHash"`

	// Data
	Data *string `json:"data,omitempty"`

	// Gas price
	// Required: true
	// Minimum: 0
	GasPrice *int64 `json:"gasPrice"`

	// Gas token
	GasToken *string `json:"gasToken,omitempty"`

	// Nonce
	// Required: true
	// Minimum: 0
	Nonce *int64 `json:"nonce"`

	// Operation
	// Required: true
	// Minimum: 0
	Operation *int64 `json:"operation"`

	// Origin
	// Max Length: 200
	// Min Length: 1
	Origin *string `json:"origin,omitempty"`

	// Refund receiver
	RefundReceiver *string `json:"refundReceiver,omitempty"`

	// Safe
	// Required: true
	Safe *string `json:"safe"`

	// Safe tx gas
	// Required: true
	// Minimum: 0
	SafeTxGas *int64 `json:"safeTxGas"`

	// Sender
	// Required: true
	Sender *string `json:"sender"`

	// Signature
	Signature *string `json:"signature,omitempty"`

	// To
	// Required: true
	To *string `json:"to"`

	// Value
	// Required: true
	// Minimum: 0
	Value *int64 `json:"value"`
}

// Validate validates this safe multisig transaction
func (m *SafeMultisigTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractTransactionHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafeTxGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeMultisigTransaction) validateBaseGas(formats strfmt.Registry) error {

	if err := validate.Required("baseGas", "body", m.BaseGas); err != nil {
		return err
	}

	if err := validate.MinimumInt("baseGas", "body", *m.BaseGas, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateContractTransactionHash(formats strfmt.Registry) error {

	if err := validate.Required("contractTransactionHash", "body", m.ContractTransactionHash); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateGasPrice(formats strfmt.Registry) error {

	if err := validate.Required("gasPrice", "body", m.GasPrice); err != nil {
		return err
	}

	if err := validate.MinimumInt("gasPrice", "body", *m.GasPrice, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	if err := validate.MinimumInt("nonce", "body", *m.Nonce, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	if err := validate.MinimumInt("operation", "body", *m.Operation, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateOrigin(formats strfmt.Registry) error {
	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	if err := validate.MinLength("origin", "body", *m.Origin, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("origin", "body", *m.Origin, 200); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateSafe(formats strfmt.Registry) error {

	if err := validate.Required("safe", "body", m.Safe); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateSafeTxGas(formats strfmt.Registry) error {

	if err := validate.Required("safeTxGas", "body", m.SafeTxGas); err != nil {
		return err
	}

	if err := validate.MinimumInt("safeTxGas", "body", *m.SafeTxGas, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", m.Sender); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransaction) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinimumInt("value", "body", *m.Value, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this safe multisig transaction based on context it is used
func (m *SafeMultisigTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SafeMultisigTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeMultisigTransaction) UnmarshalBinary(b []byte) error {
	var res SafeMultisigTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
