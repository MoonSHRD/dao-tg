// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransferWithTokenInfoResponse transfer with token info response
//
// swagger:model TransferWithTokenInfoResponse
type TransferWithTokenInfoResponse struct {

	// Block number
	// Required: true
	BlockNumber *int64 `json:"blockNumber"`

	// Execution date
	// Required: true
	// Format: date-time
	ExecutionDate *strfmt.DateTime `json:"executionDate"`

	// From
	// Required: true
	From *string `json:"from"`

	// To
	// Required: true
	To *string `json:"to"`

	// Token address
	TokenAddress *string `json:"tokenAddress,omitempty"`

	// Token id
	// Required: true
	// Min Length: 1
	TokenID *string `json:"tokenId"`

	// token info
	// Required: true
	TokenInfo *TokenInfoResponse `json:"tokenInfo"`

	// Transaction hash
	// Required: true
	TransactionHash *string `json:"transactionHash"`

	// Type
	// Read Only: true
	Type string `json:"type,omitempty"`

	// Value
	// Required: true
	// Min Length: 1
	Value *string `json:"value"`
}

// Validate validates this transfer with token info response
func (m *TransferWithTokenInfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferWithTokenInfoResponse) validateBlockNumber(formats strfmt.Registry) error {

	if err := validate.Required("blockNumber", "body", m.BlockNumber); err != nil {
		return err
	}

	return nil
}

func (m *TransferWithTokenInfoResponse) validateExecutionDate(formats strfmt.Registry) error {

	if err := validate.Required("executionDate", "body", m.ExecutionDate); err != nil {
		return err
	}

	if err := validate.FormatOf("executionDate", "body", "date-time", m.ExecutionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransferWithTokenInfoResponse) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *TransferWithTokenInfoResponse) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

func (m *TransferWithTokenInfoResponse) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("tokenId", "body", m.TokenID); err != nil {
		return err
	}

	if err := validate.MinLength("tokenId", "body", *m.TokenID, 1); err != nil {
		return err
	}

	return nil
}

func (m *TransferWithTokenInfoResponse) validateTokenInfo(formats strfmt.Registry) error {

	if err := validate.Required("tokenInfo", "body", m.TokenInfo); err != nil {
		return err
	}

	if m.TokenInfo != nil {
		if err := m.TokenInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenInfo")
			}
			return err
		}
	}

	return nil
}

func (m *TransferWithTokenInfoResponse) validateTransactionHash(formats strfmt.Registry) error {

	if err := validate.Required("transactionHash", "body", m.TransactionHash); err != nil {
		return err
	}

	return nil
}

func (m *TransferWithTokenInfoResponse) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", *m.Value, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transfer with token info response based on the context it is used
func (m *TransferWithTokenInfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTokenInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferWithTokenInfoResponse) contextValidateTokenInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenInfo != nil {
		if err := m.TokenInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenInfo")
			}
			return err
		}
	}

	return nil
}

func (m *TransferWithTokenInfoResponse) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransferWithTokenInfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferWithTokenInfoResponse) UnmarshalBinary(b []byte) error {
	var res TransferWithTokenInfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
