// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeInfoResponse safe info response
//
// swagger:model SafeInfoResponse
type SafeInfoResponse struct {

	// Address
	// Required: true
	Address *string `json:"address"`

	// Fallback handler
	// Required: true
	FallbackHandler *string `json:"fallbackHandler"`

	// Guard
	// Required: true
	Guard *string `json:"guard"`

	// Master copy
	// Required: true
	MasterCopy *string `json:"masterCopy"`

	// modules
	// Required: true
	Modules []string `json:"modules"`

	// Nonce
	// Required: true
	Nonce *int64 `json:"nonce"`

	// owners
	// Required: true
	Owners []string `json:"owners"`

	// Threshold
	// Required: true
	Threshold *int64 `json:"threshold"`

	// Version
	// Required: true
	// Min Length: 1
	Version *string `json:"version"`
}

// Validate validates this safe info response
func (m *SafeInfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFallbackHandler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterCopy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwners(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeInfoResponse) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *SafeInfoResponse) validateFallbackHandler(formats strfmt.Registry) error {

	if err := validate.Required("fallbackHandler", "body", m.FallbackHandler); err != nil {
		return err
	}

	return nil
}

func (m *SafeInfoResponse) validateGuard(formats strfmt.Registry) error {

	if err := validate.Required("guard", "body", m.Guard); err != nil {
		return err
	}

	return nil
}

func (m *SafeInfoResponse) validateMasterCopy(formats strfmt.Registry) error {

	if err := validate.Required("masterCopy", "body", m.MasterCopy); err != nil {
		return err
	}

	return nil
}

func (m *SafeInfoResponse) validateModules(formats strfmt.Registry) error {

	if err := validate.Required("modules", "body", m.Modules); err != nil {
		return err
	}

	return nil
}

func (m *SafeInfoResponse) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *SafeInfoResponse) validateOwners(formats strfmt.Registry) error {

	if err := validate.Required("owners", "body", m.Owners); err != nil {
		return err
	}

	return nil
}

func (m *SafeInfoResponse) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	return nil
}

func (m *SafeInfoResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if err := validate.MinLength("version", "body", *m.Version, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this safe info response based on context it is used
func (m *SafeInfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SafeInfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeInfoResponse) UnmarshalBinary(b []byte) error {
	var res SafeInfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
