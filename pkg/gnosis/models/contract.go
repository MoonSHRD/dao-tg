// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contract contract
//
// swagger:model Contract
type Contract struct {

	// Address
	// Required: true
	Address *string `json:"address"`

	// contract abi
	// Required: true
	ContractAbi *ContractAbi `json:"contractAbi"`

	// Display name
	// Required: true
	// Min Length: 1
	DisplayName *string `json:"displayName"`

	// Logo uri
	// Read Only: true
	// Format: uri
	LogoURI strfmt.URI `json:"logoUri,omitempty"`

	// Name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Trusted for delegate call
	// Required: true
	TrustedForDelegateCall *bool `json:"trustedForDelegateCall"`
}

// Validate validates this contract
func (m *Contract) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractAbi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogoURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustedForDelegateCall(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contract) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *Contract) validateContractAbi(formats strfmt.Registry) error {

	if err := validate.Required("contractAbi", "body", m.ContractAbi); err != nil {
		return err
	}

	if m.ContractAbi != nil {
		if err := m.ContractAbi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contractAbi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contractAbi")
			}
			return err
		}
	}

	return nil
}

func (m *Contract) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("displayName", "body", *m.DisplayName, 1); err != nil {
		return err
	}

	return nil
}

func (m *Contract) validateLogoURI(formats strfmt.Registry) error {
	if swag.IsZero(m.LogoURI) { // not required
		return nil
	}

	if err := validate.FormatOf("logoUri", "body", "uri", m.LogoURI.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contract) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *Contract) validateTrustedForDelegateCall(formats strfmt.Registry) error {

	if err := validate.Required("trustedForDelegateCall", "body", m.TrustedForDelegateCall); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this contract based on the context it is used
func (m *Contract) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContractAbi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogoURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contract) contextValidateContractAbi(ctx context.Context, formats strfmt.Registry) error {

	if m.ContractAbi != nil {
		if err := m.ContractAbi.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contractAbi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contractAbi")
			}
			return err
		}
	}

	return nil
}

func (m *Contract) contextValidateLogoURI(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "logoUri", "body", strfmt.URI(m.LogoURI)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contract) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contract) UnmarshalBinary(b []byte) error {
	var res Contract
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
