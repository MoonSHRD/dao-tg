// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeMultisigTransactionWithTransfersResponse safe multisig transaction with transfers response
//
// swagger:model SafeMultisigTransactionWithTransfersResponse
type SafeMultisigTransactionWithTransfersResponse struct {

	// Base gas
	// Required: true
	// Minimum: 0
	BaseGas *int64 `json:"baseGas"`

	// Block number
	// Read Only: true
	BlockNumber int64 `json:"blockNumber,omitempty"`

	// confirmations
	Confirmations *SafeMultisigConfirmationResponse `json:"confirmations,omitempty"`

	// Confirmations required
	// Required: true
	ConfirmationsRequired *int64 `json:"confirmationsRequired"`

	// Data
	Data *string `json:"data,omitempty"`

	// Data decoded
	// Read Only: true
	DataDecoded string `json:"dataDecoded,omitempty"`

	// Eth gas price
	// Read Only: true
	EthGasPrice string `json:"ethGasPrice,omitempty"`

	// Execution date
	// Required: true
	// Format: date-time
	ExecutionDate *strfmt.DateTime `json:"executionDate"`

	// Executor
	// Read Only: true
	Executor string `json:"executor,omitempty"`

	// Fee
	// Read Only: true
	Fee int64 `json:"fee,omitempty"`

	// Gas price
	// Required: true
	// Min Length: 1
	GasPrice *string `json:"gasPrice"`

	// Gas token
	GasToken *string `json:"gasToken,omitempty"`

	// Gas used
	// Read Only: true
	GasUsed int64 `json:"gasUsed,omitempty"`

	// Is executed
	// Required: true
	IsExecuted *bool `json:"isExecuted"`

	// Is successful
	// Read Only: true
	IsSuccessful *bool `json:"isSuccessful,omitempty"`

	// Max fee per gas
	// Read Only: true
	MaxFeePerGas string `json:"maxFeePerGas,omitempty"`

	// Max priority fee per gas
	// Read Only: true
	MaxPriorityFeePerGas string `json:"maxPriorityFeePerGas,omitempty"`

	// Modified
	// Required: true
	// Format: date-time
	Modified *strfmt.DateTime `json:"modified"`

	// Nonce
	// Required: true
	// Minimum: 0
	Nonce *int64 `json:"nonce"`

	// Operation
	// Required: true
	// Minimum: 0
	Operation *int64 `json:"operation"`

	// Origin
	// Required: true
	// Min Length: 1
	Origin *string `json:"origin"`

	// Refund receiver
	RefundReceiver *string `json:"refundReceiver,omitempty"`

	// Safe
	// Required: true
	Safe *string `json:"safe"`

	// Safe tx gas
	// Required: true
	// Minimum: 0
	SafeTxGas *int64 `json:"safeTxGas"`

	// Safe tx hash
	// Required: true
	SafeTxHash *string `json:"safeTxHash"`

	// Signatures
	Signatures *string `json:"signatures,omitempty"`

	// Submission date
	// Required: true
	// Format: date-time
	SubmissionDate *strfmt.DateTime `json:"submissionDate"`

	// To
	// Required: true
	To *string `json:"to"`

	// Transaction hash
	// Required: true
	TransactionHash *string `json:"transactionHash"`

	// transfers
	// Required: true
	Transfers []*TransferWithTokenInfoResponse `json:"transfers"`

	// Trusted
	// Required: true
	Trusted *bool `json:"trusted"`

	// Tx type
	// Read Only: true
	TxType string `json:"txType,omitempty"`

	// Value
	// Required: true
	// Min Length: 1
	Value *string `json:"value"`
}

// Validate validates this safe multisig transaction with transfers response
func (m *SafeMultisigTransactionWithTransfersResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmationsRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsExecuted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafeTxGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSafeTxHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmissionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransfers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrusted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateBaseGas(formats strfmt.Registry) error {

	if err := validate.Required("baseGas", "body", m.BaseGas); err != nil {
		return err
	}

	if err := validate.MinimumInt("baseGas", "body", *m.BaseGas, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateConfirmations(formats strfmt.Registry) error {
	if swag.IsZero(m.Confirmations) { // not required
		return nil
	}

	if m.Confirmations != nil {
		if err := m.Confirmations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("confirmations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("confirmations")
			}
			return err
		}
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateConfirmationsRequired(formats strfmt.Registry) error {

	if err := validate.Required("confirmationsRequired", "body", m.ConfirmationsRequired); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateExecutionDate(formats strfmt.Registry) error {

	if err := validate.Required("executionDate", "body", m.ExecutionDate); err != nil {
		return err
	}

	if err := validate.FormatOf("executionDate", "body", "date-time", m.ExecutionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateGasPrice(formats strfmt.Registry) error {

	if err := validate.Required("gasPrice", "body", m.GasPrice); err != nil {
		return err
	}

	if err := validate.MinLength("gasPrice", "body", *m.GasPrice, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateIsExecuted(formats strfmt.Registry) error {

	if err := validate.Required("isExecuted", "body", m.IsExecuted); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", m.Modified); err != nil {
		return err
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	if err := validate.MinimumInt("nonce", "body", *m.Nonce, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	if err := validate.MinimumInt("operation", "body", *m.Operation, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", m.Origin); err != nil {
		return err
	}

	if err := validate.MinLength("origin", "body", *m.Origin, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateSafe(formats strfmt.Registry) error {

	if err := validate.Required("safe", "body", m.Safe); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateSafeTxGas(formats strfmt.Registry) error {

	if err := validate.Required("safeTxGas", "body", m.SafeTxGas); err != nil {
		return err
	}

	if err := validate.MinimumInt("safeTxGas", "body", *m.SafeTxGas, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateSafeTxHash(formats strfmt.Registry) error {

	if err := validate.Required("safeTxHash", "body", m.SafeTxHash); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateSubmissionDate(formats strfmt.Registry) error {

	if err := validate.Required("submissionDate", "body", m.SubmissionDate); err != nil {
		return err
	}

	if err := validate.FormatOf("submissionDate", "body", "date-time", m.SubmissionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateTransactionHash(formats strfmt.Registry) error {

	if err := validate.Required("transactionHash", "body", m.TransactionHash); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateTransfers(formats strfmt.Registry) error {

	if err := validate.Required("transfers", "body", m.Transfers); err != nil {
		return err
	}

	for i := 0; i < len(m.Transfers); i++ {
		if swag.IsZero(m.Transfers[i]) { // not required
			continue
		}

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateTrusted(formats strfmt.Registry) error {

	if err := validate.Required("trusted", "body", m.Trusted); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", *m.Value, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this safe multisig transaction with transfers response based on the context it is used
func (m *SafeMultisigTransactionWithTransfersResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfirmations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataDecoded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEthGasPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGasUsed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsSuccessful(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxFeePerGas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxPriorityFeePerGas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransfers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateBlockNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "blockNumber", "body", int64(m.BlockNumber)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateConfirmations(ctx context.Context, formats strfmt.Registry) error {

	if m.Confirmations != nil {
		if err := m.Confirmations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("confirmations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("confirmations")
			}
			return err
		}
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateDataDecoded(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dataDecoded", "body", string(m.DataDecoded)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateEthGasPrice(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "ethGasPrice", "body", string(m.EthGasPrice)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateExecutor(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "executor", "body", string(m.Executor)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fee", "body", int64(m.Fee)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateGasUsed(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "gasUsed", "body", int64(m.GasUsed)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateIsSuccessful(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isSuccessful", "body", m.IsSuccessful); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateMaxFeePerGas(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "maxFeePerGas", "body", string(m.MaxFeePerGas)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateMaxPriorityFeePerGas(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "maxPriorityFeePerGas", "body", string(m.MaxPriorityFeePerGas)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateTransfers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transfers); i++ {

		if m.Transfers[i] != nil {
			if err := m.Transfers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transfers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transfers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SafeMultisigTransactionWithTransfersResponse) contextValidateTxType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "txType", "body", string(m.TxType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SafeMultisigTransactionWithTransfersResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeMultisigTransactionWithTransfersResponse) UnmarshalBinary(b []byte) error {
	var res SafeMultisigTransactionWithTransfersResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
