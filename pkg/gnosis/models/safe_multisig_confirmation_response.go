// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeMultisigConfirmationResponse
// Filters confirmations queryset
// :param obj: MultisigConfirmation instance
// :return: Serialized queryset
//
//
// swagger:model SafeMultisigConfirmationResponse
type SafeMultisigConfirmationResponse struct {

	// Owner
	// Required: true
	// Min Length: 1
	Owner *string `json:"owner"`

	// Signature
	// Required: true
	Signature *string `json:"signature"`

	// Signature type
	// Read Only: true
	SignatureType string `json:"signatureType,omitempty"`

	// Submission date
	// Required: true
	// Format: date-time
	SubmissionDate *strfmt.DateTime `json:"submissionDate"`

	// Transaction hash
	// Read Only: true
	TransactionHash string `json:"transactionHash,omitempty"`
}

// Validate validates this safe multisig confirmation response
func (m *SafeMultisigConfirmationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmissionDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeMultisigConfirmationResponse) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if err := validate.MinLength("owner", "body", *m.Owner, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigConfirmationResponse) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigConfirmationResponse) validateSubmissionDate(formats strfmt.Registry) error {

	if err := validate.Required("submissionDate", "body", m.SubmissionDate); err != nil {
		return err
	}

	if err := validate.FormatOf("submissionDate", "body", "date-time", m.SubmissionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this safe multisig confirmation response based on the context it is used
func (m *SafeMultisigConfirmationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSignatureType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeMultisigConfirmationResponse) contextValidateSignatureType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "signatureType", "body", string(m.SignatureType)); err != nil {
		return err
	}

	return nil
}

func (m *SafeMultisigConfirmationResponse) contextValidateTransactionHash(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "transactionHash", "body", string(m.TransactionHash)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SafeMultisigConfirmationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeMultisigConfirmationResponse) UnmarshalBinary(b []byte) error {
	var res SafeMultisigConfirmationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
