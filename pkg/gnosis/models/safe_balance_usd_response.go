// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SafeBalanceUsdResponse safe balance usd response
//
// swagger:model SafeBalanceUsdResponse
type SafeBalanceUsdResponse struct {

	// Balance
	// Required: true
	// Min Length: 1
	Balance *string `json:"balance"`

	// Eth value
	// Required: true
	// Min Length: 1
	EthValue *string `json:"ethValue"`

	// Fiat balance
	// Required: true
	// Min Length: 1
	FiatBalance *string `json:"fiatBalance"`

	// Fiat code
	// Required: true
	// Min Length: 1
	FiatCode *string `json:"fiatCode"`

	// Fiat conversion
	// Required: true
	// Min Length: 1
	FiatConversion *string `json:"fiatConversion"`

	// Timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// token
	// Required: true
	Token *Erc20Info `json:"token"`

	// Token address
	// Required: true
	// Min Length: 1
	TokenAddress *string `json:"tokenAddress"`
}

// Validate validates this safe balance usd response
func (m *SafeBalanceUsdResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEthValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiatBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiatCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiatConversion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeBalanceUsdResponse) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	if err := validate.MinLength("balance", "body", *m.Balance, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeBalanceUsdResponse) validateEthValue(formats strfmt.Registry) error {

	if err := validate.Required("ethValue", "body", m.EthValue); err != nil {
		return err
	}

	if err := validate.MinLength("ethValue", "body", *m.EthValue, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeBalanceUsdResponse) validateFiatBalance(formats strfmt.Registry) error {

	if err := validate.Required("fiatBalance", "body", m.FiatBalance); err != nil {
		return err
	}

	if err := validate.MinLength("fiatBalance", "body", *m.FiatBalance, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeBalanceUsdResponse) validateFiatCode(formats strfmt.Registry) error {

	if err := validate.Required("fiatCode", "body", m.FiatCode); err != nil {
		return err
	}

	if err := validate.MinLength("fiatCode", "body", *m.FiatCode, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeBalanceUsdResponse) validateFiatConversion(formats strfmt.Registry) error {

	if err := validate.Required("fiatConversion", "body", m.FiatConversion); err != nil {
		return err
	}

	if err := validate.MinLength("fiatConversion", "body", *m.FiatConversion, 1); err != nil {
		return err
	}

	return nil
}

func (m *SafeBalanceUsdResponse) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SafeBalanceUsdResponse) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	if m.Token != nil {
		if err := m.Token.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

func (m *SafeBalanceUsdResponse) validateTokenAddress(formats strfmt.Registry) error {

	if err := validate.Required("tokenAddress", "body", m.TokenAddress); err != nil {
		return err
	}

	if err := validate.MinLength("tokenAddress", "body", *m.TokenAddress, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this safe balance usd response based on the context it is used
func (m *SafeBalanceUsdResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SafeBalanceUsdResponse) contextValidateToken(ctx context.Context, formats strfmt.Registry) error {

	if m.Token != nil {
		if err := m.Token.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SafeBalanceUsdResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SafeBalanceUsdResponse) UnmarshalBinary(b []byte) error {
	var res SafeBalanceUsdResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
